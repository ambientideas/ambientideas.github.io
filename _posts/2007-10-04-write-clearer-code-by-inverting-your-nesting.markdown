---
layout: post
status: publish
published: true
title: Write clearer code by inverting your nesting
author: Matthew McCullough
author_login: admin
author_email: sales@ambientideas.com
author_url: http://www.ambientideas.com
wordpress_id: 72
wordpress_url: http://ambientideas.com/blog/index.php/2007/10/write-clearer-code-by-inverting-your-nesting/
date: 2007-10-04 17:26:00.000000000 -06:00
categories:
- Programming
tags: []
comments: []
---
<p>Taylor Gautier has an excellent explanation of how to test your precoditions early in your method, fail FAST, and get out as early as possible. This is a key point that I strive to communicate in my consulting engagements, and leaves code that others can maintain so much more easily.</p><br /><h3 class="post-title"><a href="http://javathink.blogspot.com/2006/10/short-concise-and-readable-code-invert.html"><span style="color: #333333; font-family: Verdana; font-size: 16.25px; line-height: 17px;">Short, concise and readable code - invert your logic and stop nesting already!</span></a></h3><br /><div class="post-body"><br /><p style=""><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;">Have you ever heard this maxim:<br style="" /><br /><br style="" /></span><span style="color: #333333; font-family: Verdana; font-size: 13px; font-style: italic; line-height: 16px;">"A method should have one and only one exit point"<br style="" /></span><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;"><br style="" /><br />  Well, it couldn't be more wrong. The following are the attributes of a well written method; it should:<br style="" /></span></p><br /><br /><ul style=""><br /><li style=""><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;">perform one and only one function,</span></li><br /><br /><li style=""><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;">be short and to the point,</span></li><br /><br /><li style=""><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;">be easy to read and understand,</span></li><br /><br /><li style=""><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;">and it should have a descriptive, accurate and concise name.</span></li><br /></ul><span style="font-family: Times; font-size: 16px;"><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;">Notice that none of these points says anything about how or where a method should exit. To write a clean, easy to read method, follow these guidelines:</span><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;"><br style="" /></span></span><br /><br /><ul style=""><br /><li style=""><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;">follow a template. consistent flow is easier to read.</span></li><br /><br /><li style=""><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;">check your pre conditions early. If they fail, exit fast</span></li><br /><br /><li style=""><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;">nesting is bad. avoid it. invert your logic at every step of the way.</span></li><br /></ul><span style="font-family: Times; font-size: 16px;"><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;">First, the template:</span><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;"><br style="" /></span></span><br /><pre style=""><br /><span style="color: #333333; font-family: Courier; font-size: 10.5625px; line-height: 16px;">[return value] [method name](parameters)<br style="" />[throws clause]<br style="" />{<br style="" />  [check pre conditions]<br style="" /><br style="" />  [core logic]<br style="" />}<br style="" /></span><br /></pre><span style="font-family: Times; font-size: 16px;"><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;">Pretty simple, right? So what's this about invert your logic? Well have a look at the template up there. Do you see any nesting? Right....neither do I. So let me illustrate a common idiom, one that uses in particular the if/else if/else pattern and the single exit strategy:</span><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;"><br style="" /></span></span><br /><pre style=""><br /><span style="color: #333333; font-family: Courier; font-size: 10.5625px; line-height: 16px;">/**<br style="" />* Returns the element at index<br style="" />*/<br style="" />public Object getElement(int index)<br style="" />{<br style="" />  Object theItem = null;<br style="" />  boolean listError = false;<br style="" />  boolean indexError = false;<br style="" /><br style="" />  if (list != null) {<br style="" />    if (index &gt; 0 &amp;&amp; index &lt; list.size()) {<br style="" />      theItem = list.elementAt(index);<br style="" />    } else {<br style="" />      indexError = true;<br style="" />    }<br style="" />  } else {<br style="" />    listError = true;<br style="" />  }<br style="" /><br style="" />  if (listError) {<br style="" />    throw new Exception("Bad list");<br style="" />  } else if (indexError) {<br style="" />    throw new IndexOutOfBoundsException("Bad index");<br style="" />  } else {<br style="" />    return theItem;<br style="" />  }<br style="" />} </span><br /></pre><span style="font-family: Times; font-size: 16px;"><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;">Wow, what a mouthful. And I didn't even put in a few while loops, case structures and other nonsense I usually see that ends up with code nested 4 and 6 levels deep. Let me rewrite that code up there making it match the pattern I suggested, inverting the logic, and then I will explain what I did.</span><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;"><br style="" /></span></span><br /><pre style=""><br /><span style="color: #333333; font-family: Courier; font-size: 10.5625px; line-height: 16px;">/**<br style="" />* Returns the element at index<br style="" />*/<br style="" />public Object getElement(int index)<br style="" />{<br style="" />   if (list == null) {<br style="" />       throw new Exception("Bad list");<br style="" />   }<br style="" /><br style="" />   if (index &lt; 0 || index &gt;= list.size()) {<br style="" />       throw new IndexOutOfBoundsException("Bad index");<br style="" />   }<br style="" /><br style="" />   return list.elementAt(index);<br style="" />}<br style="" /></span><br /></pre><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;">Remember when I said check your pre-conditions first, and exit fast. What this allows you to do is evaluate all of the conditions under which your method will</span><span style="color: #333333; font-family: Verdana; font-size: 13px; font-style: italic; line-height: 16px;">fail</span><span style="font-family: Times; font-size: 16px;"><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;">, and if you detect something amiss, handle it immediately. This strategy is flexible - if the pre-conditions for your class or your method change, you can add and substract the tests for those pre-conditions using this structure without having to modify surrounding code. The worst offender I see is always of the following pattern:</span><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;"><br style="" /></span><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;"><br style="" /></span></span><br /><pre style=""><br /><span style="color: #333333; font-family: Courier; font-size: 10.5625px; line-height: 16px;">if (condition_to_succeed_is_true) {<br style="" />   do_something();<br style="" />} else {<br style="" />   do_error();<br style="" />}<br style="" /></span><br /></pre><span style="font-family: Times; font-size: 16px;"><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;">The problem with this is that the reader of your code has to put the conditional test onto their mental stack while they digest what do_something() is doing. If do_something() happens to be long, or complicated, you'll probably blow the mental stack of the reader, forcing them to look at the condition again just to figure out why the do_error() is being done.</span><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;"><br style="" /></span><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;"><br style="" /></span><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;">On the other hand, when you line up your pre-condition tests linearly, there is no mental stack, the reader simply processes each in turn, and then, when they are all done, they are able to process the real meat - the do_something() - part of your method without all the baggage from your pre-condition tests. So inverting your logic means taking the above test, inverting the condition, and writing it as:</span><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;"><br style="" /></span></span><br /><pre style=""><br /><span style="color: #333333; font-family: Courier; font-size: 10.5625px; line-height: 16px;">if (!condition_to_succeed_is_true) {<br style="" />   do_error();<br style="" />   return;<br style="" />}<br style="" /><br style="" />do_something();<br style="" /></span><br /></pre><span style="font-family: Times; font-size: 16px;"><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;"><br style="" /></span><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;">So I hope you remember your CS classes and</span></span><a href="http://en.wikipedia.org/wiki/De_Morgan_duality"><span style="color: #336699; font-family: Verdana; font-size: 13px; line-height: 16px;">De Morgan's laws</span></a><span style="font-family: Times; font-size: 16px;"><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;">- I find coding like this makes me use them all the time.</span><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;"><br style="" /></span><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;"><br style="" /></span><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;">There's one other benefit this strategy has, and that's when you are writing synchronized blocks. When you write a synchronized block, you absolutely must strive to perform as little work as is absolutely necessary inside the synchronized block.</span><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;"><br style="" /></span><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;"><br style="" /></span><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;">Let's look at the problem we have when we use the normal pattern I described above, combined with synchronization -- the code now becomes:</span><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;"><br style="" /></span></span><br /><pre style=""><br /><span style="color: #333333; font-family: Courier; font-size: 10.5625px; line-height: 16px;">synchronized (lock) {<br style="" />   if (condition_to_succeed_is_true) {<br style="" />       do_something();<br style="" />   } else {<br style="" />       do_error();<br style="" />   }<br style="" />}<br style="" /></span><br /></pre><span style="font-family: Times; font-size: 16px;"><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;">Ugggh! There's no way, in Java, to release the lock before you perform do_something()! (Which we presume takes time and shouldn't be performed under lock). If you invert the logic, however, you can test the condition and release the lock as soon as you've tested it (note that it's often the case that you might need to use some data you acquired during the lock, in that case you should make a copy on the local stack under the lock, and then release it which I have shown below):</span><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;"><br style="" /></span></span><br /><pre style=""><br /><span style="color: #333333; font-family: Courier; font-size: 10.5625px; line-height: 16px;">synchronized (lock) {<br style="" />   if (!condition_to_succeed_is_true) {<br style="" />       do_error();<br style="" />       return;<br style="" />   }<br style="" />   state = copy_state();<br style="" />}<br style="" /><br style="" />do_something(state);<br style="" /></span><br /></pre><span style="font-family: Times; font-size: 16px;"><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;">Remember, in these examples I am assuming that do_something(...) is the non trivial part of your method, both in lines of code, complexity, and execution time.</span><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;"><br style="" /></span><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;"><br style="" /></span><span style="color: #333333; font-family: Verdana; font-size: 13px; line-height: 16px;">One more thing - I find that using 4 spaces to indent code blocks instead of 2 helps to break me of the habit of nesting my code because it acts like an automatic brake on the indentation level. </span></span><br /></div><br /><p>http://javathink.blogspot.com/2006/10/short-concise-and-readable-code-invert.html</p><br /><br />
